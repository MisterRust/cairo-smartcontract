%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.cairo.common.bool import TRUE, FALSE

from contracts.convoys.library import has_convoy, assert_can_spend_convoy
from contracts.map.world import Plot, world, Structure
from contracts.exploitation.production import renewable_production, non_renewable_production
from contracts.convoys.conveyables.fungibles.wood import Wood, wood_balances
from contracts.convoys.conveyables.fungibles import Fungibles
from contracts.utils.math import max

func _harvest{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(
    caller, convoy_id, x, y
):
    # assert convoy is at correct location
    let (test) = has_convoy(convoy_id, x, y)
    assert test = TRUE

    # assert convoy can be spent by caller
    assert_can_spend_convoy(convoy_id, caller)
    let (plot : Plot) = world.read(x, y)

    if plot.structure == Structure.SETTLER_CAMP:
        # harvest non renewable wood
        let (amount) = renewable_production(x, y)
        let (amount) = max(amount, 100)
        Fungibles.set(wood_balances.addr, convoy_id, amount)
        return ()
    end

    if plot.structure == Structure.LUMBER_CAMP:
        # harvest renewable wood
        let (amount) = renewable_production(x, y)
        let (amount) = max(amount, 50)
        Fungibles.set(wood_balances.addr, convoy_id, amount)
        return ()
    end

    return ()
end

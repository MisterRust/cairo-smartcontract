%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.cairo.common.bool import TRUE, FALSE

from contracts.convoys.library import has_convoy, assert_can_spend_convoy
from contracts.map.world import Plot, world, Structure
from contracts.map.biomes import extreme_biome_modfier, get_lumbercamp_modifier
from contracts.exploitation.production import extract
from contracts.convoys.conveyables.fungibles.wood import Wood, wood_balances
from contracts.convoys.conveyables.fungibles import Fungibles
from contracts.utils.math import max

func get_growth_data{}(
    x, y, structure
) -> (linear : felt, affine : felt):
    if structure == Structure.BARRACKS:
        let (modifier) = extreme_biome_modfier(x, y)
        
    end

    if structure == Structure.LUMBER_CAMP:
        return get_lumbercamp_modifier(x, y)
    end
    return ()
end

func _harvest{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(
    caller, convoy_id, x, y
):
    # assert convoy is at correct location
    let (test) = has_convoy(convoy_id, x, y)
    assert test = TRUE

    # assert convoy can be spent by caller
    assert_can_spend_convoy(convoy_id, caller)
    let (plot : Plot) = world.read(x, y)

    if plot.structure == Structure.SETTLER_CAMP:
        # harvest renewable human
        Fungibles.set(wood_balances.addr, convoy_id, amount)
        return ()
    end

    if plot.structure == Structure.TOWN:
        # harvest renewable human
        let (linear_growth, affine_growth) = get_growth_data(x, y, plot.structure)
        let (harvest_amount) = extract(
                                    x,
                                    y,
                                    3000 * level,
                                    affine_growth,
                                    linear_growth,
                                    extraction_speed,
                                    affine_extraction,
                                    0,
                                )
        let (previous_amount) = Fungibles.amount(human_balances.addr, convoy_id)
        Fungibles.set(human_balances.addr, convoy_id, previous_amount + harvest_amount) # verify maximum of the convoy
        return ()
    end

    if plot.structure == Structure.LUMBER_CAMP:
        # harvest renewable wood
        let (harvest_amount) = extract(
                                    x,
                                    y,
                                    1200 * level,
                                    affine_growth,
                                    linear_growth,
                                    extraction_speed,
                                    affine_extraction,
                                    0,
                                )
        let (previous_amount) = Fungibles.amount(wood_balances.addr, convoy_id)
        Fungibles.set(wood_balances.addr, convoy_id, previous_amount + harvest_amount)
        return ()
    end

    if plot.structure == Structure.BARRACKS:
        let (harvest_amount) = extract(
                                    x,
                                    y,
                                    4500 * level,
                                    affine_growth,
                                    linear_growth,
                                    extraction_speed,
                                    affine_extraction,
                                    0,
                                )
        let (previous_amount) = Fungibles.amount(soldier_balances.addr, convoy_id)
        Fungibles.set(soldier_balances.addr, convoy_id, previous_amount + harvest_amount)
        return ()
    end

    return ()
end
